clk: ~1.59 GHz
cpu: null
runtime: deno 2.4.3 (x86_64-unknown-linux-gnu)

benchmark                                         avg (min … max) p75 / p99    (min … top 1%)
----------------------------------------------------------------- -------------------------------
access monomorphic object                           14.27 ns/iter   9.84 ns  █                   
                                             (6.99 ns … 78.32 ns)  66.24 ns ██▄▂▁▁▁▁▁▁▁▁▁▁▂▂▂▁▁▁▂
                                        gc(  9.76 ms …  23.24 ms)   2.77  b (  0.16  b… 30.52  b)

access polymorphic object                           17.13 ns/iter  10.35 ns  █                   
                                             (6.17 ns … 80.55 ns)  64.89 ns ▄█▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▃▁▁▂
                                        gc(  9.77 ms …  24.70 ms)   3.76  b (  0.16  b… 35.20  b)

access array                                        13.34 ns/iter  10.11 ns  █▂                  
                                             (5.53 ns … 58.04 ns)  55.86 ns ▃██▂▁▁▁▁▁▁▁▁▁▂▁▁▁▁▁▂▃
                                        gc(  9.71 ms …  16.94 ms)   2.29  b (  0.16  b… 28.19  b)

summary
  access array
   1.07x faster than access monomorphic object
   1.28x faster than access polymorphic object

----------------------------------------------------------------- -------------------------------
create & access monomorphic object                  54.20 ns/iter  69.43 ns █▆                   
                                           (39.07 ns … 222.26 ns) 115.34 ns ██▃                  
                                          ( 41.36  b … 213.66  b) 104.44  b ███▅▃▂▂▂▄▆▅▅▃▃▂▁▁▁▁▁▁

create & access array                               47.86 ns/iter  47.56 ns  █                   
                                           (40.17 ns … 185.52 ns)  97.24 ns ▂█▃                  
                                          (  7.45  b … 200.16  b) 112.33  b ███▇▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁

summary
  create & access array
   1.13x faster than create & access monomorphic object

----------------------------------------------------------------- -------------------------------
pick object keys - for in & assign                 426.31 ns/iter 404.46 ns ▅█                   
                                          (367.46 ns … 891.54 ns) 861.81 ns ██                   
                                          ( 55.60  b … 490.77  b) 189.67  b ██▆▃▂▁▂▂▁▁▁▁▁▂▁▁▁▂▂▁▁

pick object keys - Object.keys() & assign          483.10 ns/iter 468.17 ns █                    
                                            (441.58 ns … 1.10 µs)   1.01 µs █▆                   
                                          ( 76.00  b … 617.69  b) 290.62  b ██▄▂▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁

pick object keys - filter() & reduce() with assign 569.21 ns/iter 542.22 ns █                    
                                            (488.28 ns … 1.40 µs)   1.34 µs ██                   
                                          (235.35  b …   1.04 kb) 621.71  b ██▅▃▃▁▁▁▁▁▁▁▂▁▁▁▁▁▁▂▁

pick object keys - Object.fromEntries() & filter()   1.05 µs/iter 983.63 ns █                    
                                            (895.81 ns … 2.11 µs)   2.03 µs ██                   
                                          (283.89  b …   1.46 kb)   1.01 kb ██▅▄▂▁▂▁▁▁▁▁▁▁▁▂▂▁▃▁▁

summary
  pick object keys - for in & assign
   1.13x faster than pick object keys - Object.keys() & assign
   1.34x faster than pick object keys - filter() & reduce() with assign
   2.46x faster than pick object keys - Object.fromEntries() & filter()
