clk: ~1.42 GHz
cpu: null
runtime: deno 2.4.3 (x86_64-unknown-linux-gnu)

benchmark                                              avg (min … max) p75 / p99    (min … top 1%)
---------------------------------------------------------------------- -------------------------------
access monomorphic object                                35.93 ns/iter  56.36 ns  █            ▃      
                                                  (7.68 ns … 74.21 ns)  73.60 ns ▄█▅▂▁▁▁▁▁▁▂▁▂▂█▅▇▂▁▂▂
                                             gc(  9.43 ms …  23.89 ms)  10.27  b (  0.16  b… 50.19  b)

access polymorphic object                                10.46 ns/iter  10.08 ns  ▃█▂                  !
                                                  (6.03 ns … 53.94 ns)  29.48 ns ▅███▇▃▁▂▃▁▁▁▁▁▁▂▁▁▁▁▂
                                             gc( 10.12 ms …  25.27 ms)   1.96  b (  0.16  b… 34.21  b)

access array                                             14.10 ns/iter  10.84 ns  █                    !
                                                  (6.89 ns … 69.50 ns)  66.37 ns ██▄▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁▁
                                             gc( 10.04 ms …  26.55 ms)   2.22  b (  0.16  b… 28.19  b)

summary
  access polymorphic object
   1.35x faster than access array
   3.44x faster than access monomorphic object

---------------------------------------------------------------------- -------------------------------
create & access monomorphic object                       46.07 ns/iter  45.96 ns ▇█                   
                                                (38.42 ns … 303.47 ns) 103.16 ns ██▆                  
                                               ( 32.14  b … 208.23  b) 104.45  b ███▇▄▂▁▂▂▂▂▁▁▁▁▁▁▁▁▁▁

create & access array                                    48.21 ns/iter  48.89 ns  █                   
                                                (39.46 ns … 179.60 ns) 105.88 ns ▄█                   
                                               ( 48.66  b … 177.47  b) 112.38  b ██▇▇▄▂▂▂▂▂▂▁▂▁▁▁▁▁▁▁▁

summary
  create & access monomorphic object
   1.05x faster than create & access array

---------------------------------------------------------------------- -------------------------------
pick object keys - Object.keys() & assign               526.45 ns/iter 503.27 ns █▂                   
                                                 (449.00 ns … 1.59 µs) 992.92 ns ██                   
                                               ( 75.47  b … 619.56  b) 292.15  b ██▅▃▃▂▂▁▁▂▂▂▂▁▁▁▂▁▂▁▁

pick object keys - Object.keys() & Object.fromEntries()   1.88 µs/iter   2.47 µs      ▃         █     
                                                 (688.33 ns … 3.35 µs)   3.30 µs ▅▂  ▅█ ▅▇ ▅▂▂▅▅█     
                                               (284.72  b … 913.04  b) 618.50  b ██▃██████▆██████▃▆▃▁▆

pick object keys - filter() & reduce() no assign          7.99 µs/iter   8.46 µs            █         
                                                   (4.96 µs … 9.77 µs)   9.77 µs            ████   █  
                                               (269.46  b …   1.46 kb)   1.02 kb ██▁▁▁▁▁▁▁███████▁██▁█

pick object keys - filter() & reduce() with assign        1.17 µs/iter   1.43 µs █                    
                                                 (496.49 ns … 4.43 µs)   4.05 µs █ █                  
                                               (304.92  b … 979.75  b) 629.51  b ███▇▄▄▄▄▄▂▃▂▂▁▁▂▃▁▂▁▂

pick object keys - Object.fromEntries() & filter()        1.58 µs/iter   1.80 µs █                    
                                                 (888.03 ns … 4.70 µs)   4.37 µs █▂ ▄                 
                                               (529.99  b …   1.40 kb)   1.01 kb ██▄██▅▆▂▂▂▁▁▃▁▂▂▁▃▁▁▂

summary
  pick object keys - Object.keys() & assign
   2.22x faster than pick object keys - filter() & reduce() with assign
   3x faster than pick object keys - Object.fromEntries() & filter()
   3.57x faster than pick object keys - Object.keys() & Object.fromEntries()
   15.19x faster than pick object keys - filter() & reduce() no assign

                                          benchmark was likely optimized out (dead code elimination) = !
                                          https://github.com/evanwashere/mitata#writing-good-benchmarks
