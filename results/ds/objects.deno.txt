clk: ~1.61 GHz
cpu: null
runtime: deno 2.4.3 (x86_64-unknown-linux-gnu)

benchmark                                         avg (min … max) p75 / p99    (min … top 1%)
----------------------------------------------------------------- -------------------------------
access monomorphic object                           25.64 ns/iter  53.61 ns  █                    !
                                             (6.89 ns … 61.60 ns)  61.10 ns ███▃▁▁▁▁▁▁▁▁▁▁▁▂▁▆▆▄▃
                                        gc( 10.56 ms …  23.38 ms)   7.38  b (  0.16  b… 33.47  b)

access polymorphic object                           26.81 ns/iter  55.68 ns  █                    !
                                            (6.96 ns … 134.22 ns)  64.60 ns ██▂▁▂▁▁▁▁▁▁▁▁▁▁▁▁▇▃▄▂
                                        gc( 10.12 ms …  21.73 ms)   8.27  b (  0.16  b…160.22  b)

access array                                        35.87 ns/iter  57.40 ns ▄█              ▆    
                                             (7.71 ns … 71.66 ns)  69.27 ns ██▄▁▁▁▁▁▁▁▁▁▂▁▁▇█▇▃▃▂
                                        gc(  9.56 ms …  15.16 ms)   9.62  b (  0.16  b… 32.19  b)

summary
  access monomorphic object
   1.05x faster than access polymorphic object
   1.4x faster than access array

----------------------------------------------------------------- -------------------------------
create & access monomorphic object                  52.49 ns/iter  55.73 ns █▅                   
                                           (38.76 ns … 565.47 ns) 134.35 ns ██                   
                                          (  7.88  b … 200.23  b) 104.33  b ███▄▃▂▃▅▄▄▃▂▁▁▁▁▁▁▁▁▁

create & access array                               51.00 ns/iter  50.49 ns █                    
                                           (39.56 ns … 302.33 ns) 143.33 ns ██                   
                                          ( 40.66  b … 217.49  b) 112.39  b ███▃▂▃▃▂▂▂▂▁▁▁▁▁▁▁▁▁▁

summary
  create & access array
   1.03x faster than create & access monomorphic object

----------------------------------------------------------------- -------------------------------
pick object keys - for in & assign                 429.76 ns/iter 412.09 ns █▅                   
                                            (373.89 ns … 1.15 µs) 855.31 ns ██                   
                                          ( 83.99  b … 464.89  b) 190.78  b ███▂▁▂▁▁▁▁▁▁▁▁▁▁▁▂▁▂▁

pick object keys - assign with in                  329.23 ns/iter 312.59 ns █                    
                                          (283.10 ns … 770.35 ns) 682.57 ns ██                   
                                          (  0.09  b … 447.52  b) 187.05  b ██▅▂▂▁▁▁▂▁▁▁▂▂▂▂▁▁▁▁▁

pick object keys - assign with Object.hasOwn       315.67 ns/iter 298.34 ns ▅█                   
                                          (274.96 ns … 671.17 ns) 626.50 ns ██                   
                                          ( 32.11  b … 460.47  b) 187.85  b ██▅▂▁▂▁▂▁▁▂▁▁▁▁▁▂▁▂▁▁

pick object keys - Object.keys() & assign          506.52 ns/iter 487.84 ns ██                   
                                            (449.09 ns … 1.23 µs) 968.14 ns ██                   
                                          (195.54  b … 617.80  b) 295.67  b ██▇▃▂▁▂▂▁▁▁▁▁▂▁▁▁▁▂▁▂

pick object keys - filter() & reduce() with assign 565.42 ns/iter 531.61 ns █                    
                                            (485.86 ns … 1.46 µs)   1.43 µs █▅                   
                                          ( 12.08  b …   1.04 kb) 624.68  b ██▃▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁

pick object keys - Object.fromEntries() & filter()   1.21 µs/iter   1.60 µs █                    
                                            (891.58 ns … 2.14 µs)   2.05 µs █▇                   
                                          (313.92  b …   1.41 kb)   1.01 kb ██▅▄▂▃▁▁▂▁▂▄▆▆▄▃▃▂▃▂▂

summary
  pick object keys - assign with Object.hasOwn
   1.04x faster than pick object keys - assign with in
   1.36x faster than pick object keys - for in & assign
   1.6x faster than pick object keys - Object.keys() & assign
   1.79x faster than pick object keys - filter() & reduce() with assign
   3.85x faster than pick object keys - Object.fromEntries() & filter()

                                     benchmark was likely optimized out (dead code elimination) = !
                                     https://github.com/evanwashere/mitata#writing-good-benchmarks
