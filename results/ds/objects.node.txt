clk: ~2.41 GHz
cpu: Intel(R) Xeon(R) CPU @ 2.20GHz
runtime: node 20.18.1 (x64-linux)

benchmark                                         avg (min … max) p75 / p99    (min … top 1%)
----------------------------------------------------------------- -------------------------------
access monomorphic object                           37.72 ns/iter  57.68 ns █                    
                                             (7.88 ns … 95.86 ns)  91.69 ns █▃▁▁▁▁▁▁▁▁▃█▆▄▃▁▁▁▁▁▁
                                        gc(  5.94 ms …  17.26 ms)  10.26  b (  0.16  b… 63.84  b)

access polymorphic object                           57.59 ns/iter  58.06 ns   █▂▂                
                                            (49.37 ns … 92.29 ns)  86.86 ns ▂▄███▃▃▅▂▂▂▂▁▁▂▁▁▁▁▂▂
                                        gc(  6.23 ms …  20.67 ms)  17.10  b (  8.07  b… 76.08  b)

access array                                        28.26 ns/iter  53.64 ns █                    
                                            (6.82 ns … 103.40 ns) 100.91 ns █▄▁▁▁▁▁▁▁▂▆▃▂▂▁▁▁▁▁▁▁
                                        gc(  6.00 ms …  20.59 ms)   7.09  b (  0.16  b… 85.99  b)

summary
  access array
   1.33x faster than access monomorphic object
   2.04x faster than access polymorphic object

----------------------------------------------------------------- -------------------------------
create & access monomorphic object                  61.04 ns/iter  76.15 ns █                    
                                           (41.59 ns … 538.41 ns) 148.54 ns ██                   
                                          ( 43.72  b … 288.08  b) 104.43  b ███▄▂▃▅▅▆▄▃▂▂▁▁▁▂▂▁▁▁

create & access array                               52.12 ns/iter  50.85 ns █▄                   
                                           (42.08 ns … 216.18 ns) 136.79 ns ██▂                  
                                          ( 45.01  b … 168.81  b) 112.33  b ███▄▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁

summary
  create & access array
   1.17x faster than create & access monomorphic object

----------------------------------------------------------------- -------------------------------
pick object keys - for in & assign                 393.84 ns/iter 376.86 ns ▄█                   
                                            (344.84 ns … 1.04 µs) 860.97 ns ██                   
                                          ( 82.99  b … 422.21  b) 187.31  b ██▃▂▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁

pick object keys - Object.keys() & assign          499.64 ns/iter 486.43 ns  █                   
                                            (430.86 ns … 1.25 µs)   1.04 µs ▇█                   
                                          (129.77  b … 428.60  b) 288.53  b ███▃▃▃▂▁▂▁▁▁▁▁▁▁▁▁▁▂▁

pick object keys - filter() & reduce() with assign 574.51 ns/iter 578.37 ns █▆                   
                                            (481.07 ns … 1.32 µs)   1.22 µs ██ ▂                 
                                          (247.20  b … 822.32  b) 578.19  b ██▅█▃▁▂▁▁▂▁▁▁▁▁▂▂▁▁▁▁

pick object keys - Object.fromEntries() & filter()   1.52 µs/iter   1.50 µs ▆█                   
                                              (1.32 µs … 2.70 µs)   2.65 µs ███▂                 
                                          (594.31  b …   1.14 kb) 970.18  b ████▄▃▂▁▁▁▁▁▂▁▁▁▁▂▂▂▃

summary
  pick object keys - for in & assign
   1.27x faster than pick object keys - Object.keys() & assign
   1.46x faster than pick object keys - filter() & reduce() with assign
   3.85x faster than pick object keys - Object.fromEntries() & filter()
