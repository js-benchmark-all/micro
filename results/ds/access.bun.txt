clk: ~2.80 GHz
cpu: AMD EPYC 7B12
runtime: bun 1.2.19 (x64-linux)

benchmark                         avg (min … max) p75 / p99    (min … top 1%)
------------------------------------------------- -------------------------------
access monomorphic object          176.93 ns/iter 171.18 ns ▄█                   
                          (160.95 ns … 660.65 ns) 364.76 ns ██▄▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
                        gc(564.37 µs …   1.57 ms)   0.41  b (  0.00  b… 96.00  b)

access polymorphic object          636.79 ns/iter 420.00 ns █                    
                           (280.00 ns … 23.56 µs)   3.52 µs ██▃▂▁▁▁▁▂▁▁▂▂▁▁▁▁▁▁▁▁
                        gc(438.47 µs …   1.91 ms)   0.00  b (  0.00  b…  0.00  b)

access array                       191.60 ns/iter 174.81 ns ▆█                   
                            (162.62 ns … 1.08 µs) 389.86 ns ██▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▂▁▁▁
                        gc(589.36 µs …   4.49 ms)   1.26  b (  0.00  b…352.00  b)

summary
  access monomorphic object
   1.08x faster than access array
   3.6x faster than access polymorphic object

------------------------------------------------- -------------------------------
create & access monomorphic object   6.77 ns/iter   5.57 ns █▆                    !
                            (4.41 ns … 106.25 ns)  29.28 ns ██                   
                          (  0.00  b …  96.00  b)   2.27  b ██▃▃▂▁▁▁▁▁▁▂▂▂▁▁▁▁▁▁▁

create & access array                7.29 ns/iter   6.87 ns  █                    !
                            (5.71 ns … 147.19 ns)  17.50 ns  █                   
                          (  0.00  b …  64.00  b)   0.08  b ▃█▆▂▄▂▂▁▂▂▁▁▁▁▁▁▁▁▁▁▁

summary
  create & access monomorphic object
   1.08x faster than create & access array

                     benchmark was likely optimized out (dead code elimination) = !
                     https://github.com/evanwashere/mitata#writing-good-benchmarks
