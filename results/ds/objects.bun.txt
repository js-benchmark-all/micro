clk: ~2.39 GHz
cpu: Intel(R) Xeon(R) CPU @ 2.20GHz
runtime: bun 1.2.19 (x64-linux)

benchmark                                         avg (min … max) p75 / p99    (min … top 1%)
----------------------------------------------------------------- -------------------------------
access monomorphic object                            4.05 ns/iter   3.73 ns  █                   
                                             (2.50 ns … 33.47 ns)  20.27 ns ▄█▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
                                        gc(  1.05 ms …   3.76 ms)   0.06  b (  0.00  b… 32.00  b)

access polymorphic object                            5.24 ns/iter   5.62 ns   █▄                 
                                             (3.13 ns … 31.61 ns)  13.27 ns ▃███▃▃▄▃▃▂▁▁▂▂▁▁▁▁▁▁▁
                                        gc(  1.07 ms …   5.29 ms)   0.00  b (  0.00  b…  0.00  b)

access array                                         6.35 ns/iter   6.11 ns  █                   
                                             (4.50 ns … 30.66 ns)  21.93 ns ▅█▄▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
                                        gc(  1.08 ms …   6.21 ms)   0.00  b (  0.00  b…  0.00  b)

summary
  access monomorphic object
   1.29x faster than access polymorphic object
   1.57x faster than access array

----------------------------------------------------------------- -------------------------------
create & access monomorphic object                  12.86 ns/iter  11.21 ns █▄                    !
                                            (8.38 ns … 167.80 ns)  48.02 ns ██                   
                                          (  0.00  b …  96.00  b)   2.94  b ██▅▃▂▁▁▁▁▁▂▂▂▁▁▁▁▁▁▁▁

create & access array                               16.16 ns/iter  16.23 ns  █                    !
                                           (11.95 ns … 151.40 ns)  39.55 ns  █▂                  
                                          (  0.00  b …  64.00  b)   0.08  b ▅██▅▃▃▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁

summary
  create & access monomorphic object
   1.26x faster than create & access array

----------------------------------------------------------------- -------------------------------
pick object keys - for in & assign                 477.49 ns/iter 484.67 ns    █                 
                                          (377.84 ns … 834.88 ns) 760.61 ns    █                 
                                          (  0.00  b … 160.00  b)  43.71  b ▃▇▆█▇█▅▂▂▂▁▂▃▂▂▃▃▂▁▁▁

pick object keys - Object.keys() & assign          587.16 ns/iter 673.90 ns █  ▂                 
                                            (454.06 ns … 1.27 µs) 976.29 ns ██ █                 
                                          (  0.00  b …  96.00  b)  44.75  b ██▅█▅▅▃▂▃▂▁▃▅▆▆▃▂▂▂▂▂

pick object keys - filter() & reduce() with assign 721.63 ns/iter 761.49 ns ▅█                   
                                            (548.85 ns … 1.42 µs)   1.30 µs ██                   
                                          (  0.00  b … 576.00  b)  54.40  b ██▆▂▃▆▃▁▃▂▂▁▁▁▃▃▅▄▂▂▁

pick object keys - Object.fromEntries() & filter()   2.51 µs/iter   2.19 µs  █                   
                                            (1.17 µs … 298.88 µs)  13.11 µs ▇█                   
                                          (  0.00  b … 128.00 kb) 500.85  b ██▆▃▂▃▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁

summary
  pick object keys - for in & assign
   1.23x faster than pick object keys - Object.keys() & assign
   1.51x faster than pick object keys - filter() & reduce() with assign
   5.25x faster than pick object keys - Object.fromEntries() & filter()

                                     benchmark was likely optimized out (dead code elimination) = !
                                     https://github.com/evanwashere/mitata#writing-good-benchmarks
