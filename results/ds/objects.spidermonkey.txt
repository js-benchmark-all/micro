clk: ~1.95 GHz
cpu: null
runtime: spidermonkey (x64)

benchmark                                         avg (min … max) p75 / p99    (min … top 1%)
----------------------------------------------------------------- -------------------------------
access monomorphic object                           23.50 ns/iter  29.75 ns          ██          
                                             (1.75 ns … 70.50 ns)  55.69 ns  ▅       ██          
                                        gc(  1.05 ms …   5.02 ms)   1.77 ms ▆██▃▁▁▂▁▂███▄▄▂▂▃▂▁▁▂

access polymorphic object                            6.49 ns/iter   6.06 ns █▆                    !
                                             (1.63 ns … 46.38 ns)  36.56 ns ███                  
                                        gc(  1.02 ms …   5.13 ms)   1.74 ms ████▃▂▂▂▁▁▁▁▁▁▁▂▂▂▂▁▁

access array                                        13.05 ns/iter  16.63 ns █                    
                                             (5.56 ns … 54.38 ns)  34.13 ns █▂▂                  
                                        gc(  1.06 ms …   5.83 ms)   1.76 ms ███▅▆▄▃▂▃▂▁▂▂▁▁▃▆▄▃▃▁

summary
  access polymorphic object
   2.01x faster than access array
   3.62x faster than access monomorphic object

----------------------------------------------------------------- -------------------------------
create & access monomorphic object                  12.23 ns/iter  12.00 ns  █                   
                                             (9.75 ns … 82.75 ns)  30.06 ns ▁██▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
create & access array                               17.47 ns/iter  20.75 ns ▂█                   
                                           (12.13 ns … 257.06 ns)  45.94 ns ██▅▃▃▅▆▃▂▁▁▁▁▁▁▁▁▁▁▁▁

summary
  create & access monomorphic object
   1.43x faster than create & access array

----------------------------------------------------------------- -------------------------------
pick object keys - Object.keys() & assign          337.07 ns/iter 333.50 ns █▃                   
                                          (301.00 ns … 671.88 ns) 621.81 ns ██▆▃▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
pick object keys - filter() & reduce() no assign   858.21 ns/iter 843.50 ns ██                   
                                            (760.00 ns … 1.60 µs)   1.45 µs ███▃▂▂▂▁▁▁▂▁▃▁▂▁▁▂▁▁▁
pick object keys - filter() & reduce() with assign 426.11 ns/iter 423.81 ns ▄█                   
                                            (372.31 ns … 1.01 µs) 771.44 ns ███▅▃▂▂▁▂▁▂▂▁▁▂▁▁▁▁▁▁
pick object keys - Object.fromEntries() & filter() 735.59 ns/iter 723.88 ns  █                   
                                            (662.13 ns … 1.26 µs)   1.21 µs ██▇▃▂▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁

summary
  pick object keys - Object.keys() & assign
   1.26x faster than pick object keys - filter() & reduce() with assign
   2.18x faster than pick object keys - Object.fromEntries() & filter()
   2.55x faster than pick object keys - filter() & reduce() no assign

                                     benchmark was likely optimized out (dead code elimination) = !
                                     https://github.com/evanwashere/mitata#writing-good-benchmarks
