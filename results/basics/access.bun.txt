clk: ~2.27 GHz
cpu: AMD EPYC 7B12
runtime: bun 1.2.19 (x64-linux)

benchmark                         avg (min … max) p75 / p99    (min … top 1%)
------------------------------------------------- -------------------------------
access monomorphic object          903.11 ns/iter 870.00 ns ▄█                   
                           (280.00 ns … 63.69 µs)   4.44 µs ███▅▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁
                        gc(429.55 µs …   4.02 ms)   0.00  b (  0.00  b…  0.00  b)

access polymorphic object          953.97 ns/iter 900.00 ns █                    
                           (300.00 ns … 40.62 µs)   5.30 µs █▆▃▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁
                        gc(447.41 µs …   4.38 ms)   0.00  b (  0.00  b…  0.00  b)

access array                       214.12 ns/iter 218.98 ns  █                   
                            (161.14 ns … 1.38 µs) 501.33 ns ▇█▆▄▃▂▂▂▂▂▁▂▁▁▁▁▁▁▁▁▁
                        gc(613.31 µs …   6.54 ms)   0.76  b (  0.00  b… 64.00  b)

summary
  access array
   4.22x faster than access monomorphic object
   4.46x faster than access polymorphic object

------------------------------------------------- -------------------------------
create & access monomorphic object   9.76 ns/iter   8.27 ns  █                    !
                            (5.24 ns … 190.42 ns)  39.46 ns  █                   
                          (  0.00  b …  96.00  b)   2.77  b ▄██▃▂▁▁▁▁▂▂▁▁▁▁▁▁▁▁▁▁

create & access array               10.58 ns/iter  10.46 ns   █                   !
                            (6.37 ns … 191.87 ns)  32.45 ns  ▃█▃                 
                          (  0.00  b …  64.00  b)   0.09  b ▂███▅▃▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁

summary
  create & access monomorphic object
   1.08x faster than create & access array

                     benchmark was likely optimized out (dead code elimination) = !
                     https://github.com/evanwashere/mitata#writing-good-benchmarks
