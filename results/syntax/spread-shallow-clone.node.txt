clk: ~2.22 GHz
cpu: Intel(R) Xeon(R) CPU @ 2.20GHz
runtime: node 20.18.1 (x64-linux)

benchmark                     avg (min … max) p75 / p99    (min … top 1%)
--------------------------------------------- -------------------------------
clone array - spread           104.65 ns/iter 101.63 ns   █ ▂                
                       (85.15 ns … 166.27 ns) 161.04 ns ▃████▄▁▁▂▁▁▁▃▄▂▃▁▂▁▂▂
                    gc(  8.90 ms …  25.68 ms) 129.48  b (128.19  b…150.15  b)

clone array - slice             54.15 ns/iter  53.94 ns  █▃                  
                       (44.16 ns … 130.11 ns)  93.86 ns ███▆▆▅▄▃▁▁▁▁▁▁▁▁▁▄▂▁▂
                    gc(  9.28 ms …  24.54 ms) 129.17  b (128.19  b…177.74  b)

summary
  clone array - slice
   1.93x faster than clone array - spread

--------------------------------------------- -------------------------------
clone object - spread           67.70 ns/iter  66.37 ns  █▃▂                 
                       (53.51 ns … 129.61 ns) 128.73 ns ▇███▄▃▁▂▁▁▂▂▂▂▃▁▂▁▁▁▂
                    gc(  7.14 ms …  19.11 ms)  97.03  b ( 96.16  b…134.44  b)

clone object - Object.assign() 379.35 ns/iter 391.74 ns       █              
                      (211.27 ns … 818.75 ns) 616.18 ns ▃▁▂▁▁▃██▄▇▁▄▁▄▁▁▂▁▁▂▂
                    gc(  6.48 ms …  32.27 ms)  97.48  b ( 96.16  b…135.25  b)

clone object - Object.create()   1.65 µs/iter   1.59 µs  █▇                  
                          (1.26 µs … 3.40 µs)   3.33 µs ▅██▆▂▄▅▂▁▁▁▁▁▁▁▁▁▁▁▁▄
                    gc(  9.14 ms …  28.35 ms) 675.59  b (371.50  b…863.34  b)

summary
  clone object - spread
   5.6x faster than clone object - Object.assign()
   24.39x faster than clone object - Object.create()
