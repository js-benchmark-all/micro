clk: ~1.86 GHz
cpu: Intel(R) Xeon(R) CPU @ 2.20GHz
runtime: node 20.18.1 (x64-linux)

benchmark                     avg (min … max) p75 / p99    (min … top 1%)
--------------------------------------------- -------------------------------
clone array - spread           110.89 ns/iter 109.24 ns  ██                  
                       (84.00 ns … 529.81 ns) 194.44 ns ███▄▁▂▃▃▂▃▄▁▁▂▂▁▃▁▁▁▂
                    gc(  7.23 ms …  20.09 ms) 128.94  b (128.19  b…150.15  b)

clone array - slice             54.67 ns/iter  52.65 ns   █                  
                       (42.14 ns … 149.17 ns)  92.99 ns ▇██▆▄▅▂▂▁▁▁▁▁▁▁▁▂▂▄▁▃
                    gc(  9.15 ms …  28.99 ms) 129.10  b (128.19  b…172.86  b)

summary
  clone array - slice
   2.03x faster than clone array - spread

--------------------------------------------- -------------------------------
clone object - spread           65.23 ns/iter  62.36 ns ▂█▂                  
                       (52.61 ns … 161.13 ns) 146.70 ns ███▅▂▁▁▁▁▁▁▂▂▂▁▁▁▁▂▁▂
                    gc(  6.60 ms …  22.24 ms)  96.57  b ( 96.16  b…112.41  b)

clone object - Object.assign() 371.99 ns/iter 392.17 ns        █             
                      (218.88 ns … 658.91 ns) 551.23 ns ▂▁▁▁▁▁▂█▅▄▄▂▄▃▂▁▂▁▁▁▂
                    gc(  6.33 ms …  20.30 ms)  96.92  b ( 96.16  b…132.90  b)

clone object - Object.create()   1.51 µs/iter   1.56 µs ▂ █    ▄             
                          (1.31 µs … 2.01 µs)   1.98 µs ███▅▁▇▅█▅▁▅▃▃▁▁▃▃▃▃▁▃
                    gc(  8.96 ms …  35.02 ms) 654.63  b (369.82  b…764.85  b)

summary
  clone object - spread
   5.7x faster than clone object - Object.assign()
   23.17x faster than clone object - Object.create()
