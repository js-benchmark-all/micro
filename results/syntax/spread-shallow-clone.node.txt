clk: ~2.40 GHz
cpu: Intel(R) Xeon(R) CPU @ 2.20GHz
runtime: node 20.18.1 (x64-linux)

benchmark                     avg (min … max) p75 / p99    (min … top 1%)
--------------------------------------------- -------------------------------
clone array - spread           183.35 ns/iter 163.46 ns ▅▃█                  
                       (76.76 ns … 637.00 ns) 590.68 ns ███▄▁▄▃▃▁▁▁▁▁▁▁▁▃▁▁▁▄
                    gc(  9.36 ms …  66.02 ms) 132.57  b (128.19  b…185.62  b)

clone array - slice             75.28 ns/iter  92.12 ns  █                    !
                       (40.92 ns … 214.64 ns) 162.86 ns ▄██▁▁▃▂▂▃▃▃▁▁▂▂▁▁▂▁▂▂
                    gc(  9.02 ms …  65.57 ms) 129.64  b (128.19  b…172.85  b)

summary
  clone array - slice
   2.44x faster than clone array - spread

--------------------------------------------- -------------------------------
clone object - spread           71.86 ns/iter  65.18 ns   █                   !
                       (49.18 ns … 593.81 ns) 115.58 ns ▃▅█▇▇█▃▂▁▁▁▁▁▂▁▁▂▂▁▂▂
                    gc(  6.46 ms …  33.93 ms)  96.51  b ( 96.16  b…114.41  b)

clone object - Object.assign() 377.95 ns/iter 418.72 ns  █                   
                      (319.08 ns … 646.73 ns) 618.56 ns ▃█▃▁▁▂▂▃▃▃▁▁▁▁▁▁▁▁▁▁▁
                    gc(  6.63 ms …  20.52 ms)  97.06  b ( 96.16  b…155.40  b)

clone object - Object.create()   1.80 µs/iter   1.66 µs  █▅                  
                          (1.32 µs … 4.15 µs)   3.76 µs ███▇▁▁▁▃▁▃▄▃▁▃▁▁▁▁▁▁▃
                    gc(  9.01 ms …  33.73 ms) 673.62  b (272.71  b…795.98  b)

summary
  clone object - spread
   5.26x faster than clone object - Object.assign()
   25.06x faster than clone object - Object.create()

                 benchmark was likely optimized out (dead code elimination) = !
                 https://github.com/evanwashere/mitata#writing-good-benchmarks
