clk: ~1.22 GHz
cpu: Intel(R) Xeon(R) CPU @ 2.20GHz
runtime: node 22.10.0 (x64-linux)

benchmark                     avg (min … max) p75 / p99    (min … top 1%)
--------------------------------------------- -------------------------------
clone array - spread            88.22 ns/iter 109.60 ns  █                   
                       (68.03 ns … 145.99 ns) 128.35 ns ▄█▆▅█▂▄▁▁▁▂▁▁▁▄▁▄▂▇▂▂
                    gc(  9.88 ms …  22.49 ms) 128.97  b (128.22  b…144.50  b)

clone array - slice             76.74 ns/iter 102.13 ns ▃█▃              ▆   
                       (48.05 ns … 114.57 ns) 110.83 ns ███▆█▃▁▃▁▁▁▁▁▁▄▆▄███▄
                    gc(  8.47 ms …  24.61 ms) 128.42  b (128.20  b…140.26  b)

summary
  clone array - slice
   1.15x faster than clone array - spread

--------------------------------------------- -------------------------------
clone object - spread           91.31 ns/iter 108.34 ns █▂    ▄              
                       (58.25 ns … 364.31 ns) 228.66 ns ██▂▁▁▃█▂▁▁▂▁▂▁▁▂▁▁▁▁▂
                    gc(  8.41 ms …  26.95 ms)  96.50  b ( 96.19  b…110.22  b)

clone object - Object.assign() 398.86 ns/iter 430.39 ns          █▄  ▂       
                      (228.66 ns … 539.81 ns) 528.03 ns ▃▁▁▁▂▂▁▁▆██▂▁█▂▁▃▆▂▄▂
                    gc(  8.17 ms …  21.64 ms)  96.71  b ( 96.19  b…122.26  b)

clone object - Object.create()   1.18 µs/iter   1.24 µs      █               
                        (877.32 ns … 1.75 µs)   1.72 µs ▂▁▁▂▃█▃▃▂▄▃▃▂▁▂▁▁▁▁▁▂
                    gc( 11.22 ms …  31.03 ms) 719.16  b (619.16  b…736.71  b)

summary
  clone object - spread
   4.37x faster than clone object - Object.assign()
   12.89x faster than clone object - Object.create()
